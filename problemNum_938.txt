//938. Range Sum of BST
/**leetcode
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
//class
class Solution {
    //global variable
    int rangeSum;
    
    //method
    public int rangeSumBST(TreeNode root, int low, int high) {
        rangeSum = 0;
        //call method
        getRangeSum(root, low, high);
        //output sum of all values inclusive range [low, high]
        return rangeSum;
        
        /* second way
        int rangeSum = 0;
        Stack<TreeNode> stack = new Stack();
        stack.push(root);
        //conditions
        while(!stack.isEmpty()){
            TreeNode node = stack.pop();
            
            if(node.val >= low && node.val <= high){
                rangeSum += node.val;
            }
            
            if(node.val > low && node.left != null){
                stack.push(node.left);
            }
            
            if(node.val < high && node.right != null){
                stack.push(node.right);
            }
        }
        return rangeSum;
        end second way*/
    }
    //method
    public void getRangeSum(TreeNode root, int low, int high){
        //conditions
        if(root != null){
            if(root.val >= low && root.val <= high){
                rangeSum += root.val;
            }
            
            if(root.val > low){
                getRangeSum(root.left, low, high);
            }
            
            if(root.val < high){
                getRangeSum(root.right, low, high);
            }
        }
    }
}































