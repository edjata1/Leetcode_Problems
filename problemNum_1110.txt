//1110. Delete Nodes And Return Forest
/**leetcode
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<TreeNode> delNodes(TreeNode root, int[] to_delete) {
        //create list store tree node values
        List<TreeNode> remaining = new ArrayList<>();
        //hashset to store values to delete
        Set<Integer> toDelete = new HashSet<>();
        
        //iterate thru values
        for(int i : to_delete){
            toDelete.add(i);
        }
        
        //call method
        removeNodes(root, toDelete, remaining); 
        //condition
        if(!toDelete.contains(root.val)){
            remaining.add(root);
        }
        
        return remaining;
    }
    
    //method
    public TreeNode removeNodes(TreeNode root, Set<Integer> toDelete, List<TreeNode> remaining){
        //error check condition
        if(root == null){
            return null;
        }
        //create var l, r
        root.left = removeNodes(root.left, toDelete, remaining);
        root.right = removeNodes(root.right, toDelete, remaining);
        //condition
        if(toDelete.contains(root.val)){
            if(root.left != null){
                remaining.add(root.left);
            }
            if(root.right != null){
                remaining.add(root.right);
            }
            //output
            return null;
        }
        //output
        return root;
    }
}

























