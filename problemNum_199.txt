//199. Binary Tree Right Side View
/**leetcode
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        //store int values list in array list
        List<Integer>visibleValues = new ArrayList<>();
        
        //error checking condtion
        if(root == null){
            return visibleValues;
        }
        
        //queue store tree nodes linked list
        Queue<TreeNode> queue = new LinkedList<>();
        //add root to queue
        queue.add(root);
        
        //condition
        while(!queue.isEmpty()){
            //var
            int size = queue.size(); 
            //iterate 
            for(int i = 0; i < size; i++){
                // var 
                TreeNode current = queue.remove();
                //conditions
                if(i == size - 1){
                    visibleValues.add(current.val);
                }
                if(current.left != null){
                    queue.add(current.left);
                }
                if(current.right != null){
                    queue.add(current.right);
                }
            }
        }
     
        //output
        return visibleValues;
    }
}

























