//86. Partition List
/**leetcode
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
//class
class Solution {
    //method
    public ListNode partition(ListNode head, int x) {
        
        //ListNode: singly-linked list, two data members (current tracking) & (next)
        ListNode beforeHead = new ListNode(0);
        ListNode before = beforeHead;
        ListNode afterHead = new ListNode(0);
        ListNode after = afterHead;
        
        //conditions
        while(head != null){
            if(head.val < x){
                before.next = head;
                before = before.next;
            }else{
                after.next = head;
                after = after.next;
            }
            
            //traverse to next node
            head = head.next;
        }
        
        //set var values
        after.next = null;
        before.next = afterHead.next;
        
        //output partition x: (-nodes) < x < (+node)
        return beforeHead.next;
    }
}