//101. Symmetric Tree
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
//101.leetcode problem
class Solution {
    //method
    public boolean isSymmetric(TreeNode root) {
        //condition
        if(root == null){
            return true;
        }
        
        //output
        return isSymmetric(root.left, root.right);
        
    }
    
    //mathod
    public boolean isSymmetric(TreeNode left, TreeNode right) {
        //conditions
        if(left == null || right == null){
            return left == right;
        }
        
        if(left.val != right.val){
            return false;
        }
        
        //output
        return isSymmetric(left.left,  right.right) && isSymmetric(left.right,  right.left);
    }
}






















