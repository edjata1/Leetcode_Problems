//79. Word Search
class Solution {
    //method
    public boolean exist(char[][] board, String word) {
       //iterations
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[i].length; j++){
                
                //condition
                if(board[i][j] == word.charAt(0) && dfs(board, i, j, 0, word)){
                //output
                return true;
                }
            }
        }
        
        //output
        return false;
    }
    
    //method
    public boolean dfs(char[][] board, int i, int j, int count, String word){
        //conditions
        if(count == word.length()){
           return true; 
        }
        
        //condition outbounds
        if(i < 0 || i >= board.length || j < 0 || j >= board[i].length || board[i][j] != word.charAt(count)){
            return false;
        }
        
        //set variable values
        char temp = board[i][j];
        board[i][j] = ' ';
        boolean found = dfs(board, i + 1, j, count + 1, word)
                     || dfs(board, i - 1, j, count + 1, word)
                     || dfs(board, i, j + 1, count + 1, word)
                     || dfs(board, i, j - 1, count + 1, word);
        
        //output
        board[i][j] = temp;
        return found;
    }
}







