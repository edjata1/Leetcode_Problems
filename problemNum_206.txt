//206. Reverse Linked List leetcode
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

//206 leetcode
class Solution {
    public ListNode reverseList(ListNode head) {

        
        ListNode prev = null;
        
        //condition
        while(head != null){
            ListNode next = head.next;
            head.next = prev;
            prev = head;
            head = next;
        }
        
        //output
        return prev;
        
        /* Another way
                //stored value
        Stack<ListNode> stack = new Stack<ListNode>();
        
        //condition
        while(head != null){
            stack.push(head);
            head = head.next;
        }
        
        ListNode dummy = new ListNode(-1);
        head = dummy;
        
        while(!stack.isEmpty()){
            ListNode current = stack.pop();
            
            head.next = new ListNode(current.val);
            head = head.next;
        }
        
        //output
        return dummy.next;
        */
    }
}