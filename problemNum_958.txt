//958. Check Completeness of a Binary Tree
/**leetcode
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    //boolean method
    public boolean isCompleteTree(TreeNode root) {
	//variable and queue
        boolean end = false; 
        Queue<TreeNode> queue = new LinkedList();
	//set queue
        queue.offer(root);
        
        //conditions
        while(!queue.isEmpty()){

	    //.poll() method: returns "element at the front" 
            TreeNode currentNode = queue.poll();

            if(currentNode == null){
                end = true;
            }else{
                if(end) return false;
                queue.offer(currentNode.left);
                queue.offer(currentNode.right);
            }
        }
	//output
        return true;
    }
}